//      -----------------------------------------------------------------------
//      Licensed Materials - Property of IBM
//      IBM WebSphere ILOG JRules
//      (c) Copyright IBM Corporation 1987, 2010. All Rights Reserved.
//      RuleApp: RuleApp
//      Date: Fri, 17 Jan 2014 11:47:44 CET
//      Generated by: ILOG JRules 7.1.1.5
//
//      N O T I C E
//
//      Changes to this file will be lost if the code is regenerated.
//      Note to U.S. Government Users Restricted Rights: 
//      Use, duplication or disclosure restricted by GSA ADP Schedule 
//      Contract with IBM Corp.
//     -----------------------------------------------------------------------

package RuleApp;

import ilog.rules.res.model.IlrPath;
import ilog.rules.res.session.IlrJ2SESessionFactory;
import ilog.rules.res.session.IlrSessionFactory;
import ilog.rules.res.session.IlrSessionRequest;
import ilog.rules.res.session.IlrSessionResponse;
import ilog.rules.res.session.IlrStatelessSession;

import java.io.PrintWriter;

import javax.jws.*;

/**
 * This class contains one method for each ruleset of the RuleApp to run.
 */
@WebService(endpointInterface = "RuleApp.LeanWSRunner")
public class LeanWSRunnerImpl implements LeanWSRunner {
	private static IlrSessionFactory sessionFactory = null;
	private static final long serialVersionUID = 1L;

	/**
	 * This method executes a ruleset archive from a RuleApp archive. The
	 * RuleApp archive is saved at the root of the project and is called:
	 * RuleApp.jar. The executed ruleset archive in this method is Rules
	 * (version 1.0). The in or inout ruleset parameters are stored in the
	 * RulesRequest class. The in or inout ruleset parameters are:
	 * <ul>
	 * <li>counter ( short )</li>
	 * <li>myMainportfolio ( com.ibm.support.PMR.Portfolio )</li>
	 * <li>mySecondaryportfolio ( com.ibm.support.PMR.Portfolio )</li>
	 * </ul>
	 * The inout or out ruleset parameters are stored in the RulesResult class.
	 * The out ruleset parameters are:
	 * <ul>
	 * <li>Exectime ( long )</li>
	 * <li>Store ( com.ibm.support.PMR.Store )</li>
	 * <li>myMainportfolio ( com.ibm.support.PMR.Portfolio )</li>
	 * <li>mySecondaryportfolio ( com.ibm.support.PMR.Portfolio )</li>
	 * </ul>
	 * 
	 * @param rulesetrequest
	 *            The ruleset parameters to set.
	 * @return A result class that stores the execution output, the user data
	 *         and the out ruleset parameters.
	 */
	public RulesResult executeRules(RulesRequest rulesetrequest)
			throws RulesetExecutionException {
		if (RulesListener.getMBean().isActivated()) {

			try {
				// create the request
				IlrSessionFactory factory = getFactory();
				IlrSessionRequest request = factory.createRequest();
				request.setRulesetPath(IlrPath.parsePath("/RuleApp/Rules"));
				request.setUserData("RuleApp.LeanWSRunnerImpl.executeRules");
				if (rulesetrequest.executionId != null)
					request.setExecutionId(rulesetrequest.executionId);

				request.setInputParameter("counter", rulesetrequest
						.getCounter());
				request.setInputParameter("myMainportfolio", rulesetrequest
						.getMyMainportfolio());
				request.setInputParameter("mySecondaryportfolio",
						rulesetrequest.getMySecondaryportfolio());

				IlrSessionResponse response;
				IlrStatelessSession session = factory.createStatelessSession();
				ExecutionHook hook = new ExecutionHook();
				request = hook.preProcessing(request);
				// Get current time
				long start = System.currentTimeMillis();
				response = session.execute(request);
				// Get the duration
				long duration = System.currentTimeMillis() - start;
				// Add measurement
				RulesListener.getMBeanManager().addMeasurement(
						response.getCanonicalRulesetPath().toString(), start,
						duration);
				response = hook.postProcessing(request, response);

				RulesResult Rulesresult = new RulesResult();

				Rulesresult.Exectime = (Long) response.getOutputParameters()
						.get("Exectime");
				Rulesresult.Store = (com.ibm.support.PMR.Store) response
						.getOutputParameters().get("Store");
				Rulesresult.myMainportfolio = (com.ibm.support.PMR.Portfolio) response
						.getOutputParameters().get("myMainportfolio");
				Rulesresult.mySecondaryportfolio = (com.ibm.support.PMR.Portfolio) response
						.getOutputParameters().get("mySecondaryportfolio");
				Rulesresult.userdata = (String) response.getUserData();
				Rulesresult.outputString = response.getRulesetExecutionOutput();
				Rulesresult.executionId = response.getExecutionId();
				return Rulesresult;
			} catch (Exception e) {
				RulesListener.getMBeanManager().addError(
						System.currentTimeMillis());
				throw new RulesetExecutionException("Rules", e);
			}
		} else {
			throw new RulesetExecutionException("Execution is not authorized");
		}

	}

	protected static synchronized IlrSessionFactory getFactory() {
		if (sessionFactory == null) {
			PrintWriter writer = new PrintWriter(System.out);
			sessionFactory = new IlrJ2SESessionFactory();
			((IlrJ2SESessionFactory) sessionFactory).setOutput(writer);
		}
		return sessionFactory;
	}
}
